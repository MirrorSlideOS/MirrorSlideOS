Python 3.12.10 (tags/v3.12.10:0cc8128, Apr  8 2025, 12:21:36) [MSC v.1943 64 bit (AMD64)] on win32
Enter "help" below or click "Help" above for more information.
import socket
import threading
import json
import random

# Creature definitions
CREATURES = {
    "Dragon": {"health": 100, "attack": 20, "ability": "Fire Breath"},
    "Griffin": {"health": 80, "attack": 15, "ability": "Sky Dive"},
    "Dire Wolf": {"health": 90, "attack": 18, "ability": "Pack Howl"}
}

# Game state
game_state = {
    "players": {},  # {client_address: {"creature": str, "health": int}}
    "world": "Elderglow Forest"
}

def create_server(host='127.0.0.1', port=999):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    
    try:
        server_socket.bind((host, port))
        server_socket.listen(5)
        print(f"Server started in {game_state['world']} on {host}:{port}")
        print("Awaiting adventurers...")
        
        while True:
            client_socket, client_address = server_socket.accept()
            print(f"New adventurer from {client_address} joined the realm!")
            client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address))
            client_thread.start()
            
    except Exception as e:
        print(f"Server error: {e}")
    finally:
        server_socket.close()

def handle_client(client_socket, client_address):
    try:
        # Send epic background and creature selection
        welcome_message = (
            "\nWelcome to the Elderglow Forest, a mystical realm where ancient trees glow with ethereal light and secrets whisper in the wind.\n"
            "Choose your creature: Dragon, Griffin, or Dire Wolf\n"
        )
        client_socket.send(welcome_message.encode('utf-8'))
        
        # Get creature choice
        data = client_socket.recv(1024).decode('utf-8').strip()
        if data not in CREATURES:
            client_socket.send("Invalid creature! Defaulting to Dire Wolf.".encode('utf-8'))
            data = "Dire Wolf"
        
        # Initialize player
        game_state["players"][client_address] = {
            "creature": data,
            "health": CREATURES[data]["health"]
        }
        client_socket.send(f"You embody a {data}! Health: {CREATURES[data]['health']}. Type 'attack <creature>', 'explore', or 'quit'.".encode('utf-8'))
        
        # Game loop
        while True:
            command = client_socket.recv(1024).decode('utf-8').strip()
            if not command:
                break
                
            if command.lower() == 'quit':
                break
                
            response = process_command(client_address, command)
            client_socket.send(response.encode('utf-8'))
            
    except Exception as e:
        print(f"Error with {client_address}: {e}")
    finally:
        if client_address in game_state["players"]:
            del game_state["players"][client_address]
        print(f"Adventurer {client_address} has left the realm.")
        client_socket.close()

def process_command(client_address, command):
    player = game_state["players"][client_address]
    parts = command.lower().split()
    
    if not parts:
        return "Invalid command. Try 'attack <creature>', 'explore', or 'quit'."
    
    if parts[0] == "attack":
        if len(parts) < 2:
            return "Specify a creature to attack (e.g., 'attack Dragon')."
        target_creature = parts[1].capitalize()
        if target_creature not in CREATURES:
            return "No such creature in the realm!"
        
        damage = CREATURES[player["creature"]]["attack"]
        return f"Your {player['creature']} uses {CREATURES[player['creature']]['ability']} on {target_creature}, dealing {damage} damage!"
    
    elif parts[0] == "explore":
        events = [
            "You find a glowing crystal pulsing with ancient magic!",
            "A shadowy figure darts between the trees, then vanishes.",
            "The forest hums, and your health increases by 10!"
        ]
        event = random.choice(events)
        if "health increases" in event:
            player["health"] += 10
        return event
    
    return "Unknown command. Try 'attack <creature>', 'explore', or 'quit'."

def create_client(host='127.0.0.1', port=55555):
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        client_socket.connect((host, port))
        print(f"Connected to the realm at {host}:{port}")
        
        # Receive and display welcome message
        message = client_socket.recv(1024).decode('utf-8')
        print(message)
        
        # Choose creature
        creature = input("Enter your creature choice: ").strip()
        client_socket.send(creature.encode('utf-8'))
        
        # Receive confirmation
        message = client_socket.recv(1024).decode('utf-8')
        print(message)
        
        # Game loop
        while True:
            command = input("Your action: ")
            client_socket.send(command.encode('utf-8'))
            if command.lower() == 'quit':
                break
            response = client_socket.recv(1024).decode('utf-8')
            print(response)
            
    except Exception as e:
        print(f"Client error: {e}")
    finally:
        client_socket.close()

if __name__ == "__main__":
    print("Welcome to the Elderglow Forest RPG!")
    while True:
        mode = input("Run as (s)erver or (c)lient? [s/c]: ").lower()
        if mode in ['s', 'c']:
            break
        print("Invalid choice. Please enter 's' for server or 'c' for client.")
    
    if mode == 's':
        create_server()
    else:
        create_client()
        
SyntaxError: multiple statements found while compiling a single statement
if __name__ == "__main__":
    print("Welcome to the Elderglow Forest RPG!")
    while True:
        mode = input("Run as (s)erver or (c)lient? [s/c]: ").lower()
        if mode in ['s', 'c']:
            break
        print("Invalid choice. Please enter 's' for server or 'c' for client.")
    
    if mode == 's':
        create_server()
    else:
        create_client()import socket
        import threading
        import json
        import random

        # Creature definitions
        CREATURES = {
            "Dragon": {"health": 100, "attack": 20, "ability": "Fire Breath"},
            "Griffin": {"health": 80, "attack": 15, "ability": "Sky Dive"},
            "Dire Wolf": {"health": 90, "attack": 18, "ability": "Pack Howl"}
        }

        # Game state
        game_state = {
            "players": {},  # {client_address: {"creature": str, "health": int}}
            "world": "Elderglow Forest"
        }

        def create_server(host='127.0.0.1', port=999):
            server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

            try:
                server_socket.bind((host, port))
                server_socket.listen(5)
                print(f"Server started in {game_state['world']} on {host}:{port}")
                print("Awaiting adventurers...")

                while True:
                    client_socket, client_address = server_socket.accept()
                    print(f"New adventurer from {client_address} joined the realm!")
                    client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address))
                    client_thread.start()

            except Exception as e:
                print(f"Server error: {e}")
            finally:
                server_socket.close()

        def handle_client(client_socket, client_address):
            try:
                # Send epic background and creature selection
                welcome_message = (
                    "\nWelcome to the Elderglow Forest, a mystical realm where ancient trees glow with ethereal light and secrets whisper in the wind.\n"
                    "Choose your creature: Dragon, Griffin, or Dire Wolf\n"
                )
                client_socket.send(welcome_message.encode('utf-8'))

                # Get creature choice
                data = client_socket.recv(1024).decode('utf-8').strip()
                if data not in CREATURES:
                    client_socket.send("Invalid creature! Defaulting to Dire Wolf.".encode('utf-8'))
                    data = "Dire Wolf"

                # Initialize player
                game_state["players"][client_address] = {
                    "creature": data,
                    "health": CREATURES[data]["health"]
                }
                client_socket.send(f"You embody a {data}! Health: {CREATURES[data]['health']}. Type 'attack <creature>', 'explore', or 'quit'.".encode('utf-8'))

                # Game loop
                while True:
                    command = client_socket.recv(1024).decode('utf-8').strip()
                    if not command:
                        break

                    if command.lower() == 'quit':
                        break

                    response = process_command(client_address, command)
                    client_socket.send(response.encode('utf-8'))

            except Exception as e:
                print(f"Error with {client_address}: {e}")
            finally:
                if client_address in game_state["players"]:
                    del game_state["players"][client_address]
                print(f"Adventurer {client_address} has left the realm.")
                client_socket.close()

        def process_command(client_address, command):
            player = game_state["players"][client_address]
            parts = command.lower().split()

            if not parts:
                return "Invalid command. Try 'attack <creature>', 'explore', or 'quit'."

            if parts[0] == "attack":
                if len(parts) < 2:
                    return "Specify a creature to attack (e.g., 'attack Dragon')."
                target_creature = parts[1].capitalize()
                if target_creature not in CREATURES:
                    return "No such creature in the realm!"

                damage = CREATURES[player["creature"]]["attack"]
                return f"Your {player['creature']} uses {CREATURES[player['creature']]['ability']} on {target_creature}, dealing {damage} damage!"

            elif parts[0] == "explore":
                events = [
                    "You find a glowing crystal pulsing with ancient magic!",
                    "A shadowy figure darts between the trees, then vanishes.",
                    "The forest hums, and your health increases by 10!"
                ]
                event = random.choice(events)
                if "health increases" in event:
                    player["health"] += 10
                return event

            return "Unknown command. Try 'attack <creature>', 'explore', or 'quit'."

        def create_client(host='127.0.0.1', port=55555):
            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

            try:
                client_socket.connect((host, port))
                print(f"Connected to the realm at {host}:{port}")

                # Receive and display welcome message
                message = client_socket.recv(1024).decode('utf-8')
                print(message)

                # Choose creature
                creature = input("Enter your creature choice: ").strip()
                client_socket.send(creature.encode('utf-8'))

                # Receive confirmation
                message = client_socket.recv(1024).decode('utf-8')
                print(message)

                # Game loop
                while True:
                    command = input("Your action: ")
                    client_socket.send(command.encode('utf-8'))
                    if command.lower() == 'quit':
                        break
                    response = client_socket.recv(1024).decode('utf-8')
                    print(response)

            except Exception as e:
                print(f"Client error: {e}")
            finally:
                client_socket.close()

        if __name__ == "__main__":
            print("Welcome to the Elderglow Forest RPG!")
            while True:
                mode = input("Run as (s)erver or (c)lient? [s/c]: ").lower()
                if mode in ['s', 'c']:
                    break
                print("Invalid choice. Please enter 's' for server or 'c' for client.")

            if mode == 's':
                create_server()
            else:
                create_client()
                
SyntaxError: invalid syntax
import socket
import threading
import random

# Creature definitions
CREATURES = {
    "Dragon": {"health": 100, "attack": 20, "ability": "Fire Breath"},
    "Griffin": {"health": 80, "attack": 15, "ability": "Sky Dive"},
    "Dire Wolf": {"health": 90, "attack": 18, "ability": "Pack Howl"}
}

# Game state
game_state = {
    "players": {},  # {client_address: {"creature": str, "health": int}}
    "world": "Elderglow Forest"
}

def create_server(host='127.0.0.1', port=55555):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    
    try:
        server_socket.bind((host, port))
        server_socket.listen(5)
        print(f"Server started in {game_state['world']} on {host}:{port}")
        print("Awaiting adventurers...")
        
        while True:
            client_socket, client_address = server_socket.accept()
            print(f"New adventurer from {client_address} joined the realm!")
            client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address))
            client_thread.start()
            
    except Exception as e:
        print(f"Server error: {e}")
    finally:
        server_socket.close()

def handle_client(client_socket, client_address):
    try:
        # Send epic background and creature selection
        welcome_message = (
            "\nWelcome to the Elderglow Forest, a mystical realm where ancient trees glow with ethereal light and secrets whisper in the wind.\n"
            "Choose your creature: Dragon, Griffin, or Dire Wolf\n"
        )
        client_socket.send(welcome_message.encode('utf-8'))
        
        # Get creature choice
        data = client_socket.recv(1024).decode('utf-8').strip()
        if data not in CREATURES:
            client_socket.send("Invalid creature! Defaulting to Dire Wolf.".encode('utf-8'))
            data = "Dire Wolf"
        
        # Initialize player
        game_state["players"][client_address] = {
            "creature": data,
            "health": CREATURES[data]["health"]
        }
        client_socket.send(f"You embody a {data}! Health: {CREATURES[data]['health']}. Type 'attack <creature>', 'explore', or 'quit'.".encode('utf-8'))
        
        # Game loop
        while True:
            command = client_socket.recv(1024).decode('utf-8').strip()
            if not command:
                break
                
            if command.lower() == 'quit':
                break
                
            response = process_command(client_address, command)
            client_socket.send(response.encode('utf-8'))
            
    except Exception as e:
        print(f"Error with {client_address}: {e}")
    finally:
        if client_address in game_state["players"]:
            del game_state["players"][client_address]
        print(f"Adventurer {client_address} has left the realm.")
        client_socket.close()

def process_command(client_address, command):
    player = game_state["players"][client_address]
    parts = command.lower().split()
    
    if not parts:
        return "Invalid command. Try 'attack <creature>', 'explore', or 'quit'."
    
    if parts[0] == "attack":
        if len(parts) < 2:
            return "Specify a creature to attack (e.g., 'attack Dragon')."
        target_creature = parts[1].capitalize()
        if target_creature not in CREATURES:
            return "No such creature in the realm!"
        
        damage = CREATURES[player["creature"]]["attack"]
        return f"Your {player['creature']} uses {CREATURES[player['creature']]['ability']} on {target_creature}, dealing {damage} damage!"
    
    elif parts[0] == "explore":
        events = [
            "You find a glowing crystal pulsing with ancient magic!",
            "A shadowy figure darts between the trees, then vanishes.",
            "The forest hums, and your health increases by 10!"
        ]
        event = random.choice(events)
        if "health increases" in event:
            player["health"] += 10
        return event
    
    return "Unknown command. Try 'attack <creature>', 'explore', or 'quit'."

def create_client(host='127.0.0.1', port=55555):
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        client_socket.connect((host, port))
        print(f"Connected to the realm at {host}:{port}")
        
        # Receive and display welcome message
        message = client_socket.recv(1024).decode('utf-8')
        print(message)
        
        # Choose creature
        creature = input("Enter your creature choice: ").strip()
        client_socket.send(creature.encode('utf-8'))
        
        # Receive confirmation
        message = client_socket.recv(1024).decode('utf-8')
        print(message)
        
        # Game loop
        while True:
            command = input("Your action: ")
            client_socket.send(command.encode('utf-8'))
            if command.lower() == 'quit':
                break
            response = client_socket.recv(1024).decode('utf-8')
            print(response)
            
    except Exception as e:
        print(f"Client error: {e}")
    finally:
        client_socket.close()

def main():
    while True:
        mode = input("Run as (s)erver or (c)lient? [s/c]: ").lower()
        if mode in ['s', 'c']:
            break
        print("Invalid choice. Please enter 's' for server or 'c' for client.")
    
    if mode == 's':
        create_server()
    else:
        create_client()

if __name__ == "__main__":
    main()
    
SyntaxError: multiple statements found while compiling a single statement
KeyboardInterrupt
import socket
import threading
import random

# Creature definitions
CREATURES = {
    "Dragon": {"health": 100, "attack": 20, "ability": "Fire Breath"},
    "Griffin": {"health": 80, "attack": 15, "ability": "Sky Dive"},
    "Dire Wolf": {"health": 90, "attack": 18, "ability": "Pack Howl"}
}

# Game state
game_state = {
    "players": {},  # {client_address: {"creature": str, "health": int}}
    "world": "Elderglow Forest"
}

def create_server(host='127.0.0.1', port=55555):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    
    try:
        server_socket.bind((host, port))
        server_socket.listen(5)
        print(f"Server started in {game_state['world']} on {host}:{port}")
        print("Awaiting adventurers...")
        
        while True:
            client_socket, client_address = server_socket.accept()
            print(f"New adventurer from {client_address} joined the realm!")
            client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address))
            client_thread.start()
            
    except Exception as e:
        print(f"Server error: {e}")
    finally:
        server_socket.close()

def handle_client(client_socket, client_address):
    try:
        # Send epic background and creature selection
        welcome_message = (
            "\nWelcome to the Elderglow Forest, a mystical realm where ancient trees glow with ethereal light and secrets whisper in the wind.\n"
            "Choose your creature: Dragon, Griffin, or Dire Wolf\n"
        )
        client_socket.send(welcome_message.encode('utf-8'))
        
        # Get creature choice
        data = client_socket.recv(1024).decode('utf-8').strip()
        if data not in CREATURES:
            client_socket.send("Invalid creature! Defaulting to Dire Wolf.".encode('utf-8'))
            data = "Dire Wolf"
        
        # Initialize player
        game_state["players"][client_address] = {
            "creature": data,
            "health": CREATURES[data]["health"]
        }
        client_socket.send(f"You embody a {data}! Health: {CREATURES[data]['health']}. Type 'attack <creature>', 'explore', or 'quit'.".encode('utf-8'))
        
        # Game loop
        while True:
            command = client_socket.recv(1024).decode('utf-8').strip()
            if not command:
                break
                
            if command.lower() == 'quit':
                break
                
            response = process_command(client_address, command)
            client_socket.send(response.encode('utf-8'))
            
    except Exception as e:
        print(f"Error with {client_address}: {e}")
    finally:
        if client_address in game_state["players"]:
            del game_state["players"][client_address]
        print(f"Adventurer {client_address} has left the realm.")
        client_socket.close()

def process_command(client_address, command):
    player = game_state["players"][client_address]
    parts = command.lower().split()
    
    if not parts:
        return "Invalid command. Try 'attack <creature>', 'explore', or 'quit'."
    
    if parts[0] == "attack":
        if len(parts) < 2:
            return "Specify a creature to attack (e.g., 'attack Dragon')."
        target_creature = parts[1].capitalize()
        if target_creature not in CREATURES:
            return "No such creature in the realm!"
        
        damage = CREATURES[player["creature"]]["attack"]
        return f"Your {player['creature']} uses {CREATURES[player['creature']]['ability']} on {target_creature}, dealing {damage} damage!"
    
    elif parts[0] == "explore":
        events = [
            "You find a glowing crystal pulsing with ancient magic!",
            "A shadowy figure darts between the trees, then vanishes.",
            "The forest hums, and your health increases by 10!"
        ]
        event = random.choice(events)
        if "health increases" in event:
            player["health"] += 10
        return event
    
    return "Unknown command. Try 'attack <creature>', 'explore', or 'quit'."

def create_client(host='127.0.0.1', port=55555):
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        client_socket.connect((host, port))
        print(f"Connected to the realm at {host}:{port}")
        
        # Receive and display welcome message
        message = client_socket.recv(1024).decode('utf-8')
        print(message)
        
        # Choose creature
        creature = input("Enter your creature choice: ").strip()
        client_socket.send(creature.encode('utf-8'))
        
        # Receive confirmation
        message = client_socket.recv(1024).decode('utf-8')
        print(message)
        
        # Game loop
        while True:
            command = input("Your action: ")
            client_socket.send(command.encode('utf-8'))
            if command.lower() == 'quit':
                break
            response = client_socket.recv(1024).decode('utf-8')
            print(response)
            
    except Exception as e:
        print(f"Client error: {e}")
    finally:
        client_socket.close()

def main():
    while True:
        mode = input("Run as (s)erver or (c)lient? [s/c]: ").lower()
        if mode in ['s', 'c']:
            break
        print("Invalid choice. Please enter 's' for server or 'c' for client.")
    
    if mode == 's':
        create_server()
    else:
        create_client()

if __name__ == "__main__":
    main()
    
SyntaxError: multiple statements found while compiling a single statement
KeyboardInterrupt
def main():
    while True:
        mode = input("Run as (s)erver or (c)lient? [s/c]: ").lower()
        if mode in ['s', 'c']:
            break
        print("Invalid choice. Please enter 's' for server or 'c' for client.")
    
    if mode == 's':
        create_server()
    else:
        create_client()

if __name__ == "__main__":
    main()
